import pandas as pd
import xlrd
import random
import math
from openpyxl import load_workbook

df = pd.read_excel("atvl_matrices.xlsx", sheet_name=['Ventures', 'Mentors', 'LGM Objectives', 'LGM Mentors', 'SGM Matrix'])
workbook = load_workbook('ATVL2.xlsx')
start_cell = 'A1'

# Access individual sheets using sheet names
Ventures = df['Ventures']
Mentors = df['Mentors']
LGMO = df['LGM Objectives']
LGMM = df['LGM Mentors']
SGMM = df['SGM Matrix']


#access individual columns
V_Attendance = Ventures['Present']
V_Name = Ventures['Venture Name']
V_Founder= Ventures['Founder']
#same with the mentors
M_Attendance = Mentors['Present']
M_Name = Mentors['Name']

#trying to combine lists into zipped lists
#ex. list1= [[A,B],[C,D]]
#    list2= [[Y,Z], [V,W]]
#    newlist = [[A,B,Y,Z], [C,D,V,W]]
combined_v = list(zip(V_Name,V_Founder,V_Attendance))
combined_m = list(zip(M_Name,M_Attendance))

#new list for classifying  different attendance for mentors, every member of the group will be placed into the corresponding list.
present_v = [sublist for sublist in combined_v if "P" in sublist]
absent_v = [sublist for sublist in combined_v if "A" in sublist]
virtual_v = [sublist for sublist in combined_v if "V" in sublist]

#same thing for mentors
present_m = [sublist for sublist in combined_m if "P" in sublist]
absent_m = [sublist for sublist in combined_m if "A" in sublist]
virtual_m = [sublist for sublist in combined_m if "V" in sublist]
df = pd.DataFrame(present_v, columns=["Venture Name", "Founder Name", "Attendace status"])


#getting ventures name
present_v_name = [item[0] for item in present_v]
virtual_v_name = [item[0] for item in virtual_v]


#getting mentors name
present_m_name = [item[0] for item in present_m]
virtual_m_name = [item[0] for item in virtual_m]

#columns as lists
BIG = 40
rooms = [{'number': '161', 'capacity': 4},{'number': '162', 'capacity': 8}, {'number': '163', 'capacity': 8}, {'number': '164', 'capacity': 6}, {'number': '150', 'capacity': BIG}, {'number': '231', 'capacity': BIG}]#,{'number': '232', 'capacity': BIG}]

for room in rooms:
  room['mentors'] = []

unassigned_mentors = present_m_name[:] + virtual_m_name[:]
objective_mentors = present_m_name[:] + virtual_m_name[:]
####
####


#ASK DR. BROWN HOW TO MAKE THE CODE SKIP OVER FILLED OUT CELLS
# if cell is None for cell in row:
  #skip over cell in row


#print(unassigned_mentors)
r = 0
while len(unassigned_mentors) > 0:
  thisroom = rooms[r]
  if len(thisroom['mentors']) < thisroom['capacity'] - 1:
    mentor = random.choice(unassigned_mentors)
    unassigned_mentors.remove(mentor)
    thisroom['mentors'].append(mentor) # Careful: might be more than one virtual mentor in the same room.
  r = (r + 1) % len(rooms)

#Now the same for ventures
for room in rooms:
  room['ventures'] = []

unassigned_ventures = present_v_name[:] + virtual_m_name[:]
objective_ventures = present_v_name[:] + virtual_m_name[:]


#print(unassigned_ventures)
i = 0

while len(unassigned_ventures) > 0:
  thisroom = rooms[i]
  if len(thisroom['ventures']) < thisroom['capacity'] - 1:
    venture = random.choice(unassigned_ventures)
    unassigned_ventures.remove(venture)
    thisroom['ventures'].append(venture) # Careful: might be more than one virtual mentor in the same room.
  i = (i + 1) % len(rooms)

sessions = math.ceil((4 * len(present_v_name + virtual_v_name))/len(rooms))

# Calculate the maximum length of mentor lists among all rooms
max_mentor_list_length = max(len(room['mentors']) for room in rooms)
max_venture_list_length = max(len(room['ventures']) for room in rooms)
# Pad mentor lists with empty strings to ensure equal length
for room in rooms:
    room['mentors'] += ['X'] * (max_mentor_list_length - len(room['mentors']))
    room['ventures'] += ['X'] * (max_mentor_list_length - len(room['ventures']))
print(rooms)


#CREATING THE OBJECTIVES

# Define the header of the column where you want to insert the list
#presenters = LGMO['Presenters']
#reviewers = LGMO('Reviewers')

# Example list of strings
#my_list = objective_mentors

# Create a DataFrame
