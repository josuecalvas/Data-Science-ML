# -*- coding: utf-8 -*-
"""ATVL-S2-Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NTIvj6M5igkGPsyh5uIv8WAXjQ_4jH-w
"""

import pandas as pd
import xlrd
import random
import math
from openpyxl import load_workbook

df = pd.read_excel("atvl_matrices.xlsx", sheet_name=['Ventures', 'Mentors', 'LGM Objectives', 'LGM Mentors', 'SGM Matrix'])
workbook = load_workbook('ATVL2.xlsx')
start_cell = 'A1'

# Access individual sheets using sheet names
Ventures = df['Ventures']
Mentors = df['Mentors']
LGMO = df['LGM Objectives']
LGMM = df['LGM Mentors']
SGMM = df['SGM Matrix']


#access individual columns
V_Attendance = Ventures['Present']
V_Name = Ventures['Venture Name']
V_Founder= Ventures['Founder']
#same with the mentors
M_Attendance = Mentors['Present']
M_Name = Mentors['Name']

#trying to combine lists into zipped lists
#ex. list1= [[A,B],[C,D]]
#    list2= [[Y,Z], [V,W]]
#    newlist = [[A,B,Y,Z], [C,D,V,W]]
combined_v = list(zip(V_Name,V_Founder,V_Attendance))
combined_m = list(zip(M_Name,M_Attendance))

#new list for classifying  different attendance for mentors, every member of the group will be placed into the corresponding list.
present_v = [sublist for sublist in combined_v if "P" in sublist]
absent_v = [sublist for sublist in combined_v if "A" in sublist]
virtual_v = [sublist for sublist in combined_v if "V" in sublist]

#same thing for mentors
present_m = [sublist for sublist in combined_m if "P" in sublist]
absent_m = [sublist for sublist in combined_m if "A" in sublist]
virtual_m = [sublist for sublist in combined_m if "V" in sublist]
df = pd.DataFrame(present_v, columns=["Venture Name", "Founder Name", "Attendace status"])


#getting ventures name
present_v_name = [item[0] for item in present_v]
virtual_v_name = [item[0] for item in virtual_v]


#getting mentors name
present_m_name = [item[0] for item in present_m]
virtual_m_name = [item[0] for item in virtual_m]

#columns as lists
BIG = 40
rooms = [{'number': '161', 'capacity': 4},{'number': '162', 'capacity': 8}, {'number': '163', 'capacity': 8}, {'number': '164', 'capacity': 6}, {'number': '150', 'capacity': BIG}, {'number': '231', 'capacity': BIG}]#,{'number': '232', 'capacity': BIG}]

for room in rooms:
  room['mentors'] = []

unassigned_mentors = present_m_name[:] + virtual_m_name[:]
objective_mentors = present_m_name[:] + virtual_m_name[:]
####
####


#ASK DR. BROWN HOW TO MAKE THE CODE SKIP OVER FILLED OUT CELLS
# if cell is None for cell in row:
  #skip over cell in row


#print(unassigned_mentors)
r = 0
while len(unassigned_mentors) > 0:
  thisroom = rooms[r]
  if len(thisroom['mentors']) < thisroom['capacity'] - 1:
    mentor = random.choice(unassigned_mentors)
    unassigned_mentors.remove(mentor)
    thisroom['mentors'].append(mentor) # Careful: might be more than one virtual mentor in the same room.
  r = (r + 1) % len(rooms)

#Now the same for ventures
for room in rooms:
  room['ventures'] = []

unassigned_ventures = present_v_name[:] + virtual_m_name[:]
objective_ventures = present_v_name[:] + virtual_m_name[:]


#print(unassigned_ventures)
i = 0

while len(unassigned_ventures) > 0:
  thisroom = rooms[i]
  if len(thisroom['ventures']) < thisroom['capacity'] - 1:
    venture = random.choice(unassigned_ventures)
    unassigned_ventures.remove(venture)
    thisroom['ventures'].append(venture) # Careful: might be more than one virtual mentor in the same room.
  i = (i + 1) % len(rooms)

sessions = math.ceil((4 * len(present_v_name + virtual_v_name))/len(rooms))

# Calculate the maximum length of mentor lists among all rooms
max_mentor_list_length = max(len(room['mentors']) for room in rooms)
max_venture_list_length = max(len(room['ventures']) for room in rooms)
# Pad mentor lists with empty strings to ensure equal length
for room in rooms:
    room['mentors'] += ['X'] * (max_mentor_list_length - len(room['mentors']))
    room['ventures'] += ['X'] * (max_mentor_list_length - len(room['ventures']))
print(rooms)


#CREATING THE OBJECTIVES

# Define the header of the column where you want to insert the list
#presenters = LGMO['Presenters']
#reviewers = LGMO('Reviewers')

# Example list of strings
#my_list = objective_mentors

# Create a DataFrame

#### CODE TO PUT BACK INTO MAIN CODE (CONVERTING TO PDF)
#### (INSERTING THE DATA FRAME ONTO THE XLSX FILE)
#### (BOTH THE SGM MATRIX AND THE OBJECTIVES)

"""
#PRINTING OUT THE TABLE

# Extract headers dynamically based on the number of rooms
    # Define headers for the table
    headers = ["Room #"]

    for i in range(1, len(rooms) ):
      headers.append(f"SGM-R{i}")

    mentors_count = max(len(room['mentors']) for room in rooms)
    ventures_count = max(len(room['ventures']) for room in rooms)

    table_data = [headers]

from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
from reportlab.lib import colors

def generate_pdf(data, filename):
    # Define the table style
    style = TableStyle([('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
                        ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
                        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                        ('GRID', (0, 0), (-1, -1), 1, colors.black),
                        ('BOX', (0, 0), (-1, -1), 1, colors.black),  # Add border around the table
                        ('INNERGRID', (0, 0), (-1, -1), 1, colors.black),  # Add inner grid lines
                        ('LEFTPADDING', (0, 0), (-1, -1), 5),  # Add left padding to cells
                        ('RIGHTPADDING', (0, 0), (-1, -1), 5),  # Add right padding to cells
                        ('TOPPADDING', (0, 0), (-1, -1), 5),  # Add top padding to cells
                        ('BOTTOMPADDING', (0, 0), (-1, -1), 5)  # Add bottom padding to cells
                        ])

    # Create the PDF document
    doc = SimpleDocTemplate(filename, pagesize=letter)
    elements = []

    # Extract headers dynamically based on the number of rooms
    headers = ["Room #"]
    for room in data:
        headers.append(room['number'])

    # Create the table data
    table_data = [headers]

    # Add mentors and ventures data

    #skip non-empty cells (virtual mentors) (Taylor Leigh)

    max_count = max(len(room['mentors']) for room in data)
    for i in range(max_count):
        mentor_title = f"Mentor {i+1}"
        mentor_data = []
        for room in data:
            mentor_data.extend(room['mentors'][i:i+1])
        table_data.append([mentor_title] + mentor_data)

    max_count = max(len(room['ventures']) for room in data)

    #skip non-empty cells (virtual ventures) (HomeSirens, MakerTrek)

    for i in range(max_count):
        venture_title = f"SGM-T({i+1})"
        venture_data = []
        for room in data:
            venture_data.extend(room['ventures'][i:i+1])
        table_data.append([venture_title] + venture_data)

    # Create the table
    table = Table(table_data)

    # Apply the table style
    table.setStyle(style)

    # Add the table to the elements list
    elements.append(table)

    # Build the PDF
    doc.build(elements)

# Example list of rooms data
data = rooms
# Define the filename for the PDF
filename = "table15.pdf"

# Generate the PDF
generate_pdf(data, filename)


#MAKING THE LGM OBJECTIVES MATRIX


###FROM DATA TABLE TO WORKBOOK

from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows

# Load the existing workbook
workbook = load_workbook('atvl_matrices.xlsx')

# Access the desired worksheet
worksheet = workbook['SGM Matrix']

# Define the starting cell where you want to paste the table
start_cell = 'A1'

# Convert the table data to a DataFrame
df_table = pd.DataFrame(data)

# Write the DataFrame to the worksheet starting from the defined start cell
for row in dataframe_to_rows(df_table, index=False, header=True):
    worksheet.append(row)

# Save the workbook
workbook.save('atvl_matrices.xlsx')

"""
